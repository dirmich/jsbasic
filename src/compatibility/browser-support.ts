/**
 * Î∏åÎùºÏö∞Ï†Ä Ìò∏ÌôòÏÑ± Í≤ÄÏÇ¨ Î∞è Ìè¥Î¶¨ÌïÑ
 * Îã§ÏñëÌïú Î∏åÎùºÏö∞Ï†ÄÏóêÏÑúÏùò Ìò∏ÌôòÏÑ±ÏùÑ Î≥¥Ïû•Ìï©ÎãàÎã§.
 */

export interface BrowserInfo {
  name: string;
  version: string;
  engine: string;
  os: string;
  mobile: boolean;
}

export interface FeatureSupport {
  webAssembly: boolean;
  serviceWorker: boolean;
  webWorkers: boolean;
  localStorage: boolean;
  indexedDB: boolean;
  webGL: boolean;
  audioContext: boolean;
  performance: boolean;
  memory: boolean;
  es6Modules: boolean;
  promises: boolean;
}

export class BrowserSupport {
  private browserInfo: BrowserInfo;
  private featureSupport: FeatureSupport;

  constructor() {
    this.browserInfo = this.detectBrowser();
    this.featureSupport = this.checkFeatureSupport();
    this.applyPolyfills();
  }

  /**
   * Î∏åÎùºÏö∞Ï†Ä Ï†ïÎ≥¥ Í∞êÏßÄ
   */
  private detectBrowser(): BrowserInfo {
    const ua = navigator.userAgent;
    const platform = navigator.platform;
    
    let name = 'Unknown';
    let version = 'Unknown';
    let engine = 'Unknown';
    
    // Chrome
    if (ua.includes('Chrome') && !ua.includes('Edge')) {
      name = 'Chrome';
      const match = ua.match(/Chrome\/(\d+\.\d+)/);
      version = match && match[1] ? match[1] : 'Unknown';
      engine = 'Blink';
    }
    // Firefox
    else if (ua.includes('Firefox')) {
      name = 'Firefox';
      const match = ua.match(/Firefox\/(\d+\.\d+)/);
      version = match && match[1] ? match[1] : 'Unknown';
      engine = 'Gecko';
    }
    // Safari
    else if (ua.includes('Safari') && !ua.includes('Chrome')) {
      name = 'Safari';
      const match = ua.match(/Version\/(\d+\.\d+)/);
      version = match && match[1] ? match[1] : 'Unknown';
      engine = 'WebKit';
    }
    // Edge
    else if (ua.includes('Edge')) {
      name = 'Edge';
      const match = ua.match(/Edge\/(\d+\.\d+)/);
      version = match && match[1] ? match[1] : 'Unknown';
      engine = 'EdgeHTML';
    }
    // IE
    else if (ua.includes('Trident') || ua.includes('MSIE')) {
      name = 'Internet Explorer';
      const match = ua.match(/(?:MSIE |rv:)(\d+\.\d+)/);
      version = match && match[1] ? match[1] : 'Unknown';
      engine = 'Trident';
    }

    const os = this.detectOS(platform, ua);
    const mobile = /Mobi|Android/i.test(ua);

    return { name, version, engine, os, mobile };
  }

  /**
   * Ïö¥ÏòÅÏ≤¥Ï†ú Í∞êÏßÄ
   */
  private detectOS(platform: string, ua: string): string {
    if (platform.includes('Win')) return 'Windows';
    if (platform.includes('Mac')) return 'macOS';
    if (platform.includes('Linux')) return 'Linux';
    if (ua.includes('Android')) return 'Android';
    if (ua.includes('iPhone') || ua.includes('iPad')) return 'iOS';
    return 'Unknown';
  }

  /**
   * Í∏∞Îä• ÏßÄÏõê ÌôïÏù∏
   */
  private checkFeatureSupport(): FeatureSupport {
    return {
      webAssembly: typeof WebAssembly !== 'undefined',
      serviceWorker: 'serviceWorker' in navigator,
      webWorkers: typeof Worker !== 'undefined',
      localStorage: this.testLocalStorage(),
      indexedDB: 'indexedDB' in window,
      webGL: this.testWebGL(),
      audioContext: typeof AudioContext !== 'undefined' || typeof (window as any).webkitAudioContext !== 'undefined',
      performance: 'performance' in window,
      memory: 'memory' in performance,
      es6Modules: this.testES6Modules(),
      promises: typeof Promise !== 'undefined'
    };
  }

  /**
   * LocalStorage ÌÖåÏä§Ìä∏
   */
  private testLocalStorage(): boolean {
    try {
      const test = '__test__';
      localStorage.setItem(test, test);
      localStorage.removeItem(test);
      return true;
    } catch {
      return false;
    }
  }

  /**
   * WebGL ÌÖåÏä§Ìä∏
   */
  private testWebGL(): boolean {
    try {
      const canvas = document.createElement('canvas');
      const gl = canvas.getContext('webgl') || canvas.getContext('experimental-webgl');
      return !!gl;
    } catch {
      return false;
    }
  }

  /**
   * ES6 Î™®Îìà ÏßÄÏõê ÌÖåÏä§Ìä∏
   */
  private testES6Modules(): boolean {
    const script = document.createElement('script');
    return 'noModule' in script;
  }

  /**
   * Ìè¥Î¶¨ÌïÑ Ï†ÅÏö©
   */
  private applyPolyfills(): void {
    // Promise Ìè¥Î¶¨ÌïÑ
    if (!this.featureSupport.promises) {
      this.loadPromisePolyfill();
    }

    // requestAnimationFrame Ìè¥Î¶¨ÌïÑ
    this.polyfillRequestAnimationFrame();

    // Performance.now Ìè¥Î¶¨ÌïÑ
    if (!this.featureSupport.performance) {
      this.polyfillPerformanceNow();
    }

    // Array.from Ìè¥Î¶¨ÌïÑ
    this.polyfillArrayFrom();

    // Object.assign Ìè¥Î¶¨ÌïÑ
    this.polyfillObjectAssign();
  }

  /**
   * Promise Ìè¥Î¶¨ÌïÑ Î°úÎìú
   */
  private loadPromisePolyfill(): void {
    console.log('üîÑ Loading Promise polyfill...');
    // Í∞ÑÎã®Ìïú Promise Ìè¥Î¶¨ÌïÑ (Ïã§Ï†úÎ°úÎäî Ïô∏Î∂Ä ÎùºÏù¥Î∏åÎü¨Î¶¨ ÏÇ¨Ïö© Í∂åÏû•)
    (window as any).Promise = class SimplePromise {
      constructor(executor: (resolve: Function, reject: Function) => void) {
        // Í∏∞Î≥∏Ï†ÅÏù∏ Promise Íµ¨ÌòÑ
        console.warn('Using basic Promise polyfill');
      }
    };
  }

  /**
   * requestAnimationFrame Ìè¥Î¶¨ÌïÑ
   */
  private polyfillRequestAnimationFrame(): void {
    if (!window.requestAnimationFrame) {
      window.requestAnimationFrame = (callback: FrameRequestCallback) => {
        return window.setTimeout(callback, 16);
      };
    }

    if (!window.cancelAnimationFrame) {
      window.cancelAnimationFrame = (id: number) => {
        window.clearTimeout(id);
      };
    }
  }

  /**
   * Performance.now Ìè¥Î¶¨ÌïÑ
   */
  private polyfillPerformanceNow(): void {
    if (!window.performance) {
      (window as any).performance = {};
    }

    if (!window.performance.now) {
      const start = Date.now();
      window.performance.now = () => Date.now() - start;
    }
  }

  /**
   * Array.from Ìè¥Î¶¨ÌïÑ
   */
  private polyfillArrayFrom(): void {
    if (!Array.from) {
      Array.from = function<T, U>(
        arrayLike: ArrayLike<T>, 
        mapFn?: (v: T, k: number) => U,
        thisArg?: any
      ): U[] {
        const result: U[] = [];
        const length = arrayLike.length;
        
        for (let i = 0; i < length; i++) {
          const value = arrayLike[i];
          if (mapFn && value !== undefined) {
            result[i] = mapFn.call(thisArg, value, i);
          } else {
            result[i] = value as unknown as U;
          }
        }
        
        return result;
      };
    }
  }

  /**
   * Object.assign Ìè¥Î¶¨ÌïÑ
   */
  private polyfillObjectAssign(): void {
    if (!Object.assign) {
      Object.assign = function(target: any, ...sources: any[]): any {
        if (target == null) {
          throw new TypeError('Cannot convert undefined or null to object');
        }

        const to = Object(target);

        for (let i = 0; i < sources.length; i++) {
          const nextSource = sources[i];
          if (nextSource != null) {
            for (const nextKey in nextSource) {
              if (Object.prototype.hasOwnProperty.call(nextSource, nextKey)) {
                to[nextKey] = nextSource[nextKey];
              }
            }
          }
        }

        return to;
      };
    }
  }

  /**
   * Î∏åÎùºÏö∞Ï†Ä Ï†ïÎ≥¥ Î∞òÌôò
   */
  getBrowserInfo(): BrowserInfo {
    return { ...this.browserInfo };
  }

  /**
   * Í∏∞Îä• ÏßÄÏõê Ï†ïÎ≥¥ Î∞òÌôò
   */
  getFeatureSupport(): FeatureSupport {
    return { ...this.featureSupport };
  }

  /**
   * Î∏åÎùºÏö∞Ï†Ä Ìò∏ÌôòÏÑ± ÌôïÏù∏
   */
  isSupported(): boolean {
    // ÏµúÏÜå ÏöîÍµ¨ÏÇ¨Ìï≠ ÌôïÏù∏
    const requirements = {
      localStorage: true,
      performance: true,
      es6Modules: false, // ÏÑ†ÌÉùÏ†Å
      promises: true
    };

    for (const [feature, required] of Object.entries(requirements)) {
      if (required && !this.featureSupport[feature as keyof FeatureSupport]) {
        return false;
      }
    }

    return true;
  }

  /**
   * Ìò∏ÌôòÏÑ± Í≤ΩÍ≥† ÌëúÏãú
   */
  showCompatibilityWarning(): void {
    if (!this.isSupported()) {
      const message = `
        ‚ö†Ô∏è Î∏åÎùºÏö∞Ï†Ä Ìò∏ÌôòÏÑ± Í≤ΩÍ≥†
        
        ÌòÑÏû¨ Î∏åÎùºÏö∞Ï†Ä: ${this.browserInfo.name} ${this.browserInfo.version}
        
        ÏùºÎ∂Ä Í∏∞Îä•Ïù¥ Ï†úÎåÄÎ°ú ÏûëÎèôÌïòÏßÄ ÏïäÏùÑ Ïàò ÏûàÏäµÎãàÎã§.
        ÏµúÏã† Î≤ÑÏ†ÑÏùò Chrome, Firefox, SafariÎ•º ÏÇ¨Ïö©ÌïòÏãúÍ∏∞ Î∞îÎûçÎãàÎã§.
      `;
      
      console.warn(message);
      
      // ÏÇ¨Ïö©ÏûêÏóêÍ≤å Í≤ΩÍ≥† ÌëúÏãú
      if (confirm('Î∏åÎùºÏö∞Ï†Ä Ìò∏ÌôòÏÑ± Î¨∏Ï†úÍ∞Ä Í∞êÏßÄÎêòÏóàÏäµÎãàÎã§. Í≥ÑÏÜç ÏßÑÌñâÌïòÏãúÍ≤†ÏäµÎãàÍπå?')) {
        console.log('ÏÇ¨Ïö©ÏûêÍ∞Ä Ìò∏ÌôòÏÑ± Í≤ΩÍ≥†Î•º ÏäπÏù∏ÌñàÏäµÎãàÎã§.');
      }
    }
  }

  /**
   * ÏÑ±Îä• Í∂åÏû•ÏÇ¨Ìï≠ Ï†úÍ≥µ
   */
  getPerformanceRecommendations(): string[] {
    const recommendations: string[] = [];

    if (this.browserInfo.mobile) {
      recommendations.push('Î™®Î∞îÏùº ÌôòÍ≤ΩÏóêÏÑúÎäî ÏÑ±Îä•Ïù¥ Ï†úÌïúÎê† Ïàò ÏûàÏäµÎãàÎã§.');
    }

    if (!this.featureSupport.webWorkers) {
      recommendations.push('Web WorkersÎ•º ÏßÄÏõêÌïòÏßÄ ÏïäÏïÑ ÏùºÎ∂Ä Î∞±Í∑∏ÎùºÏö¥Îìú ÏûëÏóÖÏù¥ Ï†úÌïúÎê©ÎãàÎã§.');
    }

    if (!this.featureSupport.memory) {
      recommendations.push('Î©îÎ™®Î¶¨ ÏÇ¨Ïö©Îüâ Î™®ÎãàÌÑ∞ÎßÅÏù¥ ÏßÄÏõêÎêòÏßÄ ÏïäÏäµÎãàÎã§.');
    }

    if (this.browserInfo.name === 'Internet Explorer') {
      recommendations.push('Internet ExplorerÎäî ÏÑ±Îä•Í≥º Ìò∏ÌôòÏÑ±Ïóê Ï†úÌïúÏù¥ ÏûàÏäµÎãàÎã§.');
    }

    return recommendations;
  }

  /**
   * Ìò∏ÌôòÏÑ± Î¶¨Ìè¨Ìä∏ ÏÉùÏÑ±
   */
  generateCompatibilityReport(): string {
    const info = this.getBrowserInfo();
    const features = this.getFeatureSupport();
    const recommendations = this.getPerformanceRecommendations();

    const report = {
      timestamp: new Date().toISOString(),
      browser: info,
      features,
      supported: this.isSupported(),
      recommendations
    };

    return JSON.stringify(report, null, 2);
  }
}

// Ï†ÑÏó≠ Î∏åÎùºÏö∞Ï†Ä ÏßÄÏõê Ïù∏Ïä§ÌÑ¥Ïä§
export const browserSupport = new BrowserSupport();